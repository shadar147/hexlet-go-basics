package ex6

func main() {
	/*
		int — основной кросплатформенный тип целых чисел, может быть отрицательным
		int64 нужен для больших чисел из внешних систем. Например, ID в СУБД имеет тип bigint. Чтобы правильно распарсить такой ID, используется int64
		float64 — число с плавающей точкой. Чаще всего используются для математических операций. Например, функция math.Max(), определяющая наибольшее число, принимает аргументы в виде float64
	*/

	//x := 10
	//y := 5

	// сложение
	//x + y // 15

	// вычитание
	//x - y // 5

	// деление
	//x / y // 2

	// умножение
	//x * y // 50

	// Любые операции осуществляются только над числами одинакового типа:
	//x := 5.05
	//y := 10

	//x + y // invalid operation: x + y (mismatched types float64 and int)

	//x := 5.05
	//y := 10

	//x + float64(y) // 15.05

	// нельзя конвертировать float64 к целому числу, если после точки не только нули
	//x := int64(5.05) // ошибка компиляции: constant 5.05 truncated to integer

	//x := int64(5.00) // OK

	// uint не может быть отрицательным
	//x := uint(-5) // constant -5 overflows uint

	// Однако существуют способы обмануть компилятор, и тогда вы получите неявное поведение в коде:
	//a, _ := strconv.Atoi("-42")

	// ошибки компиляции нет, но число было преобразовано в положительное путем прибавления MAX_UINT+1. MAX_UINT = 18446744073709551615
	//x := uint(a) // 18446744073709551574

	//a, _ := strconv.Atoi("5.05")

	// ошибки компиляции нет, но значение всегда будет равно 0
	//x := int(a) // 0
}
